int find(int x,int y[],int z)
{
	int left = 0, right = z- 1;
	while (left<=right)
	{
		int mid = (right + left) / 2;
		if (x <y[mid])
			right = mid - 1;
		else if (x > y[mid])
			left = mid + 1;
		else
			return mid;
	}
	return -1;
}//定义函数实现二分查找有序数组

#include<stdio.h>
int*check(int*p, int sz, int n)
{
	int left=0;
	int right=sz-1;
	if (n<*(p + left) || n>*(p + right))
		return NULL;
	while (left<right)
	{
		int m = (left + right) / 2;
		if (n < *(p + m))
			right = m;
		else if (n > *(p + m))
			left = m;
		else
			return (p + m);
	}
}//有序数组二分查找
int main()
{
	int n = 0;
	scanf("%d", &n);
	int a[10] = {0,1,2,3,4,5,6,7,8,9};
	printf("%d",*check(a, sizeof(a)/sizeof(a[0]), n));
	return 0;
}
