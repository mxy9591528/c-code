#include<stdio.h>
int main()
{
	int n = 0, count = 0;
	scanf("%d", &n);
	for (int i = 0; i < 32; i++)
	{
		if ((n)  & 1 == 1)
			count++;
		n >>= 1;
	}
	printf("%d", count);
	return 0;
}//计算二进制数中1的个数

#include<stdio.h>
int main()
{
	int a = 7, b = 9;
	a = a + b;
	b = a - b;
	a = a - b;//缺点，可能溢出
	printf("%d %d\n", a, b);
	int c = 4, d = 7;
	c = c ^ d;
	d = c ^ d;
	c = c ^ d;
	printf("%d %d\n", c, d);
	return 0;
}//不创建临时变量交换

int count_one(unsigned int n)//unsigned使负数变为无符号数
{
	int count = 0;
	while (n)
	{
		if (n % 2 == 1)
			count++;
		n = n / 2;
	}
	return count;
}//函数实现

int count__one(int n)
{
	int count = 0;
	while (n)
	{
		n = n & (n - 1);
		count++;
	}
	return count;
}//与操作，每与一次，消掉一个1

int differ(int x,int y)
{
	int m = 0;
	m = x ^ y;
	return count__one(m);
}//判断两个数二进制位不同的个数，异或操作

void print(int n)
{
	int i = 0;
	for (i = 30; i >= 0; i-=2)
	{
		printf("%d ", (n >> i) & 1);
	}
	printf("\n");
	for (i = 31; i >=1; i -= 2)
	{
		printf("%d ", (n >> i )& 1);
	}
}

#include<stdio.h>
int main()
{
	int x = 0, y = 0;
	scanf("%d%d", &x, &y);
	int b = differ(x, y);
	int n = 0, count = 0;
	scanf("%d", &n);
	print(n);
	int c = count_one(n);
	int a = count__one(n);
	for (int i = 0; i < 32; i++)
	{
		if ((n  & 1) == 1)
			count++;
		n >>= 1;
	}
	printf("\n%d\n%d\n%d\n%d", count,c,a,b);
	return 0;
}//计算二进制数中1的个数

#include<stdio.h>
int main()
{
	char p = 0;
	for (p = 'a'; p < 'e'; p++)
	{
		if ((p != 'a') + (p == 'd') + (p == 'b') + (p != 'd') == 1)
			printf("%c", p);
	}
	return 0;
}//判断
