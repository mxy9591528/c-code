#include<stdio.h>
int main()
{
	int n, i, j, temp, arr[45];
	scanf("%d", &n);
	if (n >= 5 && n <= 50)
		for (i = 0; i < n; i++)
		{
			scanf("%d", &arr[i]);//获取每个人的成绩
		}
	for (i = 0; i < n; i++)
	{
		for (j = i; j < n; j++)//通过循环挑选将数组内元素按从大到小排序
		{
			if (arr[i] < arr[j])
			{
				temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
		}
	}
	for (i = 0; i < 5; i++)
		printf("%d ", arr[i]);
	return 0;
}//冒泡排序

#include<stdio.h>
#include<stdlib.h>
int cmp_int(const void* e1,const void* e2)
{
	return *(int*)e2 - *(int*)e1;
}
int main()
{

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct Stu
{
	char name[20];
	int age[10];
};
int int_cmp(const void*e1,const void*e2)//void类型指针
{
	return *(int*)e1 -*(int*)e2;
}
int d_cmp(const void*e1, const void*e2)
{
	if ((double*)e1 - (double*)e2 == 0)
		return 0;
	else if ((double*)e1 - (double*)e2 < 0)
		return -1;
	else
		return 1;
}
int Stu_cmp(const void* e1, const void*e2)
{
	return strcmp(((struct Stu*)e1)->name,((struct Stu*)e2)->name);
}
void test()
{
	int arr[] = { 2,4,34,334,64,23,5,8,45,24,6,7 };
	double a[] = { 3.5,9.3,2.4,9.9,1,3,6.74,3.14 };
	struct Stu s[3] = { {"张三",20},{"李四",30},{"王五",10} };
	int sz_1 = sizeof(arr) / sizeof(arr[0]);
	int sz_2 = sizeof(a) / sizeof(a[0]);
	int sz_3 = sizeof(s) / sizeof(s[0]);
	qsort(arr, sz_1, sizeof(arr[0]), int_cmp);
	qsort(a, sz_2, sizeof(a[0]), d_cmp);
	qsort(s, sz_3, sizeof(s[0]), Stu_cmp);//qsort函数
	for (int i = 0; i < sz_1;i++)
	{
		printf("%d ", arr[i]);
	}
	printf("\n");
	for (int i = 0; i < sz_2; i++)
	{
		printf("%f ", a[i]);
	}
	printf("\n");
	for (int i = 0; i < sz_3; i++)
	{
		printf("%s,%d ", s[i].name,*s[i].age);
	}
}
int main()
{
	test();
	return 0;
}
	int n, i,  arr[45];
	scanf("%d", &n);
		for (i = 0; i < n; i++)
		{
			scanf("%d", &arr[i]);
		}
	qsort(arr, n, 4, cmp_int);
	for (i = 0; i < n; i++)
	{
	}
	for (i = 0; i < 5; i++)
		printf("%d ", arr[i]);
	return 0;
}//qsort库函数

#include<stdio.h>
#include<string.h>

struct money
{
	int value=0;
	const char name[20];
};

int cmp_int( void*e1, void*e2)
{
	return *(int*)e1 - *(int*)e2;
}

int cmp_float(void*e1,void*e2)
{
	if (*(float*)e1 == *(float*)e2)
		return 0;
	else if (*(float*)e1 > *(float*)e2)
		return 1;
	else
		return -1;
}

int cmp_struct_money_by_value( void*e1,void*e2)
{
	return (((struct money*)e1)->value - ((struct money*)e2)->value);
}

int cmp_struct_money_by_name(void*e1,void*e2)
{
	return strcmp(((struct money*)e1)->name, ((struct money*)e2)->name);
}
void swap(char*buf1, char*buf2,int width)
{
	int i = 0;
	char temp = 0;
	for (i = 0; i < width; i++)
	{
		temp = *buf1;
		*buf1 = *buf2;
		*buf2 = temp;
		buf1++;
		buf2++;
	}
}

void bubble_sort( void*arr,int sz,int width,int(*cmp)(void*e1,void*e2))//自定义冒泡排序的qsort（快速排序）函数
{
	int i = 0;
	int j = 0;
	for (i = 0; i < sz; i++)
	{
		for (j = 0; j < sz - 1-i; j++)
		{
			if (cmp((char*)arr + j * width, (char*)arr + (j + 1)*width) > 0)//将arr地址转化为char型指针，加上width后，每次跳过，width个字节，确定了所输入数据的类型
				swap((char*)arr + j * width, (char*)arr + (j + 1)*width,width);
		}
	}
}
int main()
{
	int a[10] = { 9,3,6,2,5,4,7,8,1,10 };
	float b[10] = { 1.3,2.1,8.9,3,6,7.4,3.2,9.9,8.3,2.9 };
	struct money m[6]= { {5,"five"},{20,"twenty"},{1,"one"},{50,"fifty"},{10,"ten"},{100,"hundred"} };
	int sz_1 = sizeof(a) / sizeof(a[0]);
	int sz_2 = sizeof(b) / sizeof(b[0]);
	int sz_3 = sizeof(m) / sizeof(m[0]);
	bubble_sort(a, sz_1, sizeof(a[0]), cmp_int);
	bubble_sort(b, sz_2, sizeof(b[0]), cmp_float);
	bubble_sort(m, sz_3, sizeof(m[0]), cmp_struct_money_by_value);
	bubble_sort(m, sz_3, sizeof(m[0]), cmp_struct_money_by_name);
	for (int i = 0; i < sz_1; i++)
	{
		printf("%d ", a[i]);
	}
	printf("\n");
	for (int i = 0; i < sz_2; i++)
	{
		printf("%f ", b[i]);
	}
	printf("\n");
	for (int i = 0; i < sz_3; i++)
	{
		printf("%d %s\n", m[i].value,m[i].name);
	}
	return 0;
}
