#include<stdio.h>
#include<string.h>
int main()
{
	int i = 0;
	char key[10] = "123456";
	char password[10] = { 0 };
	for (i = 0; i < 3; i++)
	{
		printf("请输入密码：\n");
		scanf("%s", &password);
		if (strcmp(password, key) == 0)//strcmp函数，比较两个字符串，若两个字符串相同则返回0，反之返回1
		{
			printf("登录成功\n");
			break;
		}
		else
			printf("密码错误\n");
	}
	if (i == 3)
		printf("密码错误三次，程序自动退出\n");
	return 0;
}//strcmp函数

#include<stdio.h>
#include<string.h>
int main()
{
	char str[] = "LOVE";
	int count = 0;
	char a;
	while (~scanf("%c", &a))
	{
		if (strchr(str, a))
			count++;
		else
			break;
	}
	printf("%d\n", count);
	return 0;
}//strchr函数

#include<stdio.h>
#include<assert.h>

char*F_strcpy(char*destination, const char*source)//char类型返回有助于函数嵌套调用 +1分;const修饰，防止指针被修改 +1分
{
	char *ret = destination;
	assert(*destination != NULL&&*source!=NULL);//断言函数，在无效指针情况下报错
	while(*destination++=*source++)//简化代码
	{
		;
	}
	return ret;
}//满分实现strcpy函数
char* F_strncpy(char*dest, const char*source, int n)
{
	char* ret = dest;
	while (*dest++ = *source++)
	{
		n--;
	}
	while (n--)
	{
		*dest++ ='\0';
	}
	return ret;
}

int F_strlen(const char*str)//const修饰，防止指针被修改
{
	int count = 0;
	assert(*str != NULL);//断言函数，在无效指针情况下报错
	while (*str != '\0')
	{
		str++;
		count++;
	}
	return count;
}//满分实现strlen函数
int T_strlen(const char*str)
 {
	assert(str);
	if (*str !='\0' )
	{
		str++;
		return 1 + T_strlen(str);
	}
	 else
		return 0;
}
int F_strcmp(const char*e1, const char*e2)
{
	assert(e1&&e2);
	while (*e1 == *e2)
	{
		if(*e1=='\0')
			return 0;
		e1++;
		e2++;
	}
	if (*e1>*e2 )
		return 1;
	else
		return -1;
}

int T_strncmp(const char*e1, const char*e2,int n)
{
	assert(e1&&e2);
	while ((*e1 == *e2)&&n)
	{
		e1++;
		e2++;
		n--;//记录
	}
	return (int)(*e1 - *e2);
}

#include<stdio.h>
#include<assert.h>
char*F_strcat(char*dest, const char*sre)
{
	char* ret = dest;
	assert(dest&&sre);
	while (*dest)
	{
		dest++;
	}
	while (*dest++=*sre++)
	{
		;
	}
	return ret;
}//strcat

int main()
{
	char a[] = "***********";
	char b[] = "qwer";
	printf("%s\n%d\n%d",  F_strcpy(a,b),F_strlen(a), F_strlen(b),T_strlen(b));
	return 0;
}

#include<stdio.h>
#include<assert.h>
#include<string.h>
char*my_strstr(const char*s1, const char*s2)
{
	assert(s1&&s2);
	char*keep=(char*)s1;
	char*p1,*p2;
	if (!*s2)
		return keep;
	while (*keep)
	{
		p1 = keep;
		p2 =(char*)s2;
		while (*p1&&*p2&&!(*p1-*p2))
		{
			p1++;
			p2++;
		}
		if (!*p2)
			return keep;
		keep++;
	}
	return NULL;
}//自定义strstr,与库函数形式一样,一般查找
char*str_1(const char*str1, const char*str2)
{
	assert(str1&&str2);
	size_t len1 = strlen(str1);
	size_t len2 = strlen(str2);
	if (len1 < len2)
		return NULL;
	size_t len = len1 - len2;
	int i = 0;
	int j = 0;
	for (i = 0; i < len; i++)//O(m*n)
	{
		for (j = 0; j < len2; j++)
		{
			if (str1[i + j] != str2[j])
				break;
		}
		if(j==len2)
			return (char*)str1 + i;
	}
	return NULL;
}

int main()
{
	char a[] = "abbbcdef";
	char b[] = "bbc";
	printf("%s\n", str_1(a,b));
	return 0;
}

#include<stdio.h>
#include<string.h>
#include<errno.h>
#include<ctype.h>
#include<stdlib.h>
int main()
{
	char n[] = "mxy2287352895@outlook.com";
	char ncpy[100] = { 0 };
	strcpy(ncpy, n);
	char*p="@.";
	char*ret = NULL;
	for (int i = 0; i < strlen(n); i++)
	{
		if (islower(n[i]))
			n[i]=toupper(n[i]);
		printf("%c", n[i]);
	}
	FILE*pf = fopen("learn1.c", "r");
	if (pf == NULL)
		printf("%s\n", strerror(errno));
	else
		printf("\noperation success\n");
	for (ret=strtok(n, p);ret!=NULL;ret=strtok(NULL,p))
	{
		printf("%s\n", ret);
	}
	return 0;
}

#include<stdio.h>
#include<string.h>
void*my_memcpy(void*dest, const void*source, size_t n)
{
	void*ret = dest;
	while (n--)
	{
		*(char*)dest= *(char*)source;
		++(char*)dest;
		++(char*)source;
	}
	return ret;
}//实现memcpy
int my_memcmp(const void*e1, const void*e2, size_t n)
{
	assert(e1&&e2);
	while ((*(char*)e1 == *(char*)e2) && n)//n要小于等于字符串的长度，可以不用if再判断
	{
		++(char*)e1;//先强转再++
		++(char*)e2;
		n--;//记录
	}
	return (int)(*(char*)e1 - *(char*)e2);
}
void*my_memmove(void*dest, const void*source, size_t n)
{
	void*ret = dest;
	if (dest < source)//前->后
		while (n--)
		{
			{
				*(char*)dest = *(char*)source;
				++(char*)dest;
				++(char*)source;
			}
		}
	else//后->前
	{
		while (n--)
		{
			*((char*)dest+n) = *((char*)source+n);
		}
	}
	return ret;
}//实现memmove
struct S
{
	char name[10];
	int age[10];
};
int main()
{
	int a[] = { 1,2,3,4,5,6 };
	int b[10] = { 1,2,5 };
	char c[10] = "";
	struct S q[] = { {"张三",24},{"李四",30} };
	struct S w[100] = { 0 };
	memset(c, '*', sizeof(c));//memset库函数，插入指定大小字符
	printf("%d\n", memcmp(a, b, 8));
	my_memcpy(b, a, sizeof(a));
	my_memcpy(w, q, sizeof(q));
	for (int i = 0; i < sizeof(c) / sizeof(c[0]); i++)//实现结果
	{
		printf("%c ", c[i]);
	}
	printf("\n");
	for (int i = 0; i < sizeof(a) / sizeof(a[0]); i++)
	{
		printf("%d ", b[i]);
	}

	printf("\n");
	for (int i = 0; i < sizeof(q) / sizeof(q[0]); i++)
	{
		printf("%s %d ", w[i].name, *(w+i)->age);
	}
	printf("\n");
	return 0;
}
